@page "/feedbackform";
@using FeedbackApp.Models;
@inject FeedbackApp.Services.FeedbackService feedbackService;

@if (Submited)
{
    <p>Thank you for your feed back home slice</p>
}
else
{
    <EditForm EditContext="@editContext" OnValidSubmit="@HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label for="name">Name:</label>
            <InputText id="name" @bind-Value="@feedback.Name" />
        </div>

        <div>
            <label for="email">Email:</label>
            <InputText id="email" @bind-Value="@feedback.Email" />
        </div>

        <div>
            <label for="message">Comment:</label>
            <InputTextArea id="message" @bind-Value="@feedback.Comment" />
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
}

@code {
    private EditContext editContext;
    private bool isValidating = false;

    private bool Submited { get; set; } = false;

    private Feedback feedback = new Feedback();

    private async Task HandleSubmit()
    {
        Console.WriteLine("Submitting Feedback");
        await feedbackService.AddFeedback(feedback);
        Console.WriteLine($"Feedback submitted: {feedback.Name}, {feedback.Email}, {feedback.Comment}");
        feedback = new();
        Submited = true;
    }

    protected override void OnInitialized()
    {
        editContext = new EditContext(feedback);
        editContext.OnValidationRequested += HandleValidationRequested;
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        if (isValidating) return;
        isValidating = true;

        if (!editContext.Validate())
        {
            Console.WriteLine("Validation failed!");
        }

        isValidating = false;
    }
}