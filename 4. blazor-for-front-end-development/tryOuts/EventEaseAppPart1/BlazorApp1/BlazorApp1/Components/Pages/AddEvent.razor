@page "/addevent"
@rendermode InteractiveServer
@using Shared.Models;
@using Shared.Interfaces;
@inject ILogger<AddEvent> Logger;
@inject IEventCardDataService EventCardDataService;

<h3>AddEvent</h3>

<EditForm FormName="AddEventForm" Model="@card" OnValidSubmit="@HandleSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="event-card">
		<div class="form-grid">
			<div>
				<label for="name">Event Name:</label>
				<InputText id="name" @bind-Value=@card.Name />
			</div>
			<div>
				<label for="description">Description:</label>
				<InputText id="description" @bind-Value=@card.Description />
			</div>
			<div>
				<label for="location">Location:</label>
				<InputText id="location" @bind-Value=@card.Location />
			</div>
			<div>
				<label for="isPublic">Is public:</label>
				<InputCheckbox id="isPublic" @bind-Value=@card.IsPublic />
			</div>
			<div>
				<label for="maxAtendees">Max Attendees:</label>
				<label>@card.MaxAttendees</label>
			</div>
		</div>
	</div>
	<button type="submit">Submit</button>
</EditForm>

@if (IsSuccess)
{
	<p>Event has been added successfully!</p>
}

@code {

	[Parameter]
	public EventCallback<bool> OnSuccess { get; set; }

	private EventCard card = new EventCard();
	private bool IsSuccess = false;

	protected override async Task OnInitializedAsync()
	{
		Logger.LogInformation("AddEvent page initialized");
	}

	private async Task HandleSubmit()
	{
		Logger.LogInformation("Handle submit started");
		card.Id = Guid.NewGuid().ToString();
		await EventCardDataService.AddEventCardAsync(card);
		Logger.LogInformation("Handle submit finished");
		IsSuccess = true;
		await NotifyParent(IsSuccess);
		_ = Task.Run(async () =>
		{
			await Task.Delay(2000);
			IsSuccess = false;
			await InvokeAsync(StateHasChanged);
		});

		card = new EventCard(); // Reset the form
	}

	private async Task NotifyParent(bool success)
	{
		if (OnSuccess.HasDelegate)
		{
			await OnSuccess.InvokeAsync(success);
		}
	}
}