@page "/account"
@rendermode InteractiveWebAssembly
@using Shared.Models
@inject ILogger<Account> Logger;
@inject Shared.Communication.SignalRService SignalRService;
@inject Shared.Services.ApplicationStorage AppStorage;

<h3>Account</h3>
@if (IsLoggedIn)
{
	if (NoEvents)
	{
		<p>You are not interested or attending any events</p>
	}
	<div style="display: flex; gap: 2rem; align-items: flex-start;">
		<div>
			<h4 style="color: #1976d2;">Going To Events</h4>
			<div style="display: flex; flex-wrap: wrap; gap: 0.5rem;">
				@foreach (var goingTo in goingToEvents)
				{
					<div style="background: #e3f2fd; color: #1976d2; border-radius: 16px; padding: 1rem; min-width: 220px; box-shadow: 0 1px 3px #1976d233; margin-bottom: 0.5rem;">
						<strong>@goingTo.Name</strong><br />
						<span>@goingTo.Description</span><br />
						<span><b>Location:</b> @goingTo.Location</span><br />
						<span><b>Date:</b> @goingTo.Date.ToString("yyyy-MM-dd HH:mm")</span><br />
						<span><b>Attendees:</b> @goingTo.CurrentAttendees / @goingTo.MaxAttendees</span><br />
						<span><b>Public:</b> @(goingTo.IsPublic ? "Yes" : "No")</span>
					</div>
				}
			</div>
		</div>
		<div>
			<h4 style="color: #388e3c;">Interested in Events</h4>
			<div style="display: flex; flex-wrap: wrap; gap: 0.5rem;">
				@foreach (var interestedIn in interestedInEvents)
				{
					<div style="background: #e8f5e9; color: #388e3c; border-radius: 16px; padding: 1rem; min-width: 220px; box-shadow: 0 1px 3px #388e3c33; margin-bottom: 0.5rem;">
						<strong>@interestedIn.Name</strong><br />
						<span>@interestedIn.Description</span><br />
						<span><b>Location:</b> @interestedIn.Location</span><br />
						<span><b>Date:</b> @interestedIn.Date.ToString("yyyy-MM-dd HH:mm")</span><br />
						<span><b>Attendees:</b> @interestedIn.CurrentAttendees / @interestedIn.MaxAttendees</span><br />
						<span><b>Public:</b> @(interestedIn.IsPublic ? "Yes" : "No")</span>
					</div>
				}
			</div>
		</div>
	</div>
}
else
{
	<p>Please login to view your account details.</p>

}

@code {
	public bool IsLoggedIn { get; set; }
	public bool NoEvents { get; set; }
	private string userId = string.Empty;	
	private IEnumerable<Attendance> collection = new List<Attendance>();
	private List<EventCard> goingToEvents = new List<EventCard>();
	private List<EventCard> interestedInEvents = new List<EventCard>();

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			userId = await AppStorage.GetItem(AppStorage.UserKey);

			await SignalRService.EnsureConnectionOpen();
			Logger.LogInformation("SignalR connection established successfully.");

			IsLoggedIn = !string.IsNullOrEmpty(userId);
			if (IsLoggedIn)
			{
				Logger.LogInformation($"User {userId} is logged in.");
				var collection = await SignalRService.Attendances(userId);
				if (collection.Any())
				{
					goingToEvents.AddRange(await SignalRService.GetEvents(collection.Where(a => a.Attended == true).Select(e => e.EventId)));
					interestedInEvents.AddRange(await SignalRService.GetEvents(collection.Where(a => a.Attended == false).Select(e => e.EventId)));
				}
				else
				{
					NoEvents = true;
				}
			}
			else
			{
				Logger.LogInformation("No user is currently logged in.");
			}

			StateHasChanged();
		}
	}

	// protected override async Task OnInitializedAsync()
	// {
	// 	await SignalRService.EnsureConnectionOpen();
	// 	Logger.LogInformation("SignalR connection established successfully.");

	// 	IsLoggedIn = !string.IsNullOrEmpty(userId);
	// 	if (IsLoggedIn)
	// 	{
	// 		Logger.LogInformation($"User {userId} is logged in.");
	// 		var collection = await SignalRService.Attendances(userId);
	// 		if (collection.Any())
	// 		{
	// 			goingToEvents.AddRange(await SignalRService.GetEvents(collection.Where(a => a.Attended == true).Select(e => e.EventId)));
	// 			interestedInEvents.AddRange(await SignalRService.GetEvents(collection.Where(a => a.Attended == false).Select(e => e.EventId)));
	// 		}
	// 	}
	// 	else
	// 	{
	// 		Logger.LogInformation("No user is currently logged in.");
	// 	}
	// }
}