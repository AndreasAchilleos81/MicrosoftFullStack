@using Microsoft.AspNetCore.SignalR.Client
@using Shared.Communication
@using Shared.Services
@rendermode InteractiveWebAssembly
@inject ApplicationStorage ApplicationStorage;
@inject SignalRService SignalRService;
@inject ILogger<SessionStatus> Logger;
@inject Shared.Services.LoginState LoginState;

<span class="status-dot @(IsLoggedIn ? "online" : "offline")"></span>
<span>@(IsLoggedIn ? "Online" : "Offline")</span>

@code {
	private bool IsLoggedIn;
	private bool _hasCheckedStatusRun = false;
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender || _hasCheckedStatusRun) return;
		_hasCheckedStatusRun = true;
		await CheckSessionStatus().ContinueWith(task =>
		{
			if (task.IsCompletedSuccessfully)
			{
				StateHasChanged();
			}
			else
			{
				// Handle any errors that occurred during the session check
				Logger.LogError("Error checking session status: " + task.Exception?.Message);
			}
		});
	}

	protected override async Task OnInitializedAsync()
	{
		await SignalRService.EnsureConnectionOpen();
		SignalRService.HubConnection.On<bool>("SessionStatusChanged", async (isLoggedIn) =>
		{
			Logger.LogInformation($"Session status changed: {(isLoggedIn ? "Online" : "Offline")}");
			if (this.IsLoggedIn != isLoggedIn)
			{
				this.IsLoggedIn = isLoggedIn;
				await InvokeAsync(StateHasChanged);
			}
		});
	}

	private async Task CheckSessionStatus()
	{
		await SignalRService.EnsureConnectionOpen();
		string userId = await ApplicationStorage.GetItem(ApplicationStorage.UserKey);
		IsLoggedIn = await SignalRService.IsSessionActive(userId);
		LoginState.SetLoginState(userId, IsLoggedIn);
	}
}
