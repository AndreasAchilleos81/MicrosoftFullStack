@page "/addevent"
@rendermode InteractiveWebAssembly
@using Shared.Models;
@using Shared.Interfaces;
@inject Shared.Communication.SignalRService SignalRService;
@inject ILogger<AddEvent> Logger;
<h3>AddEvent</h3>


<EditForm FormName="AddEventForm" Model="@Card" OnValidSubmit="@HandleSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="event-card">
		<div class="form-grid">
			<div>
				<label for="name">Event Name:</label>
				<InputText id="name" @bind-Value=@Card.Name />
			</div>
			<div>
				<label for="description">Description:</label>
				<InputText id="description" @bind-Value=@Card.Description />
			</div>
			<div>
				<label for="location">Location:</label>
				<InputText id="location" @bind-Value=@Card.Location />
			</div>
			<div>
				<label for="isPublic">Is public:</label>
				<InputCheckbox id="isPublic" @bind-Value=@Card.IsPublic />
			</div>
			<div>
				<label for="maxAtendees">Max Attendees:</label>
				<label>@Card.MaxAttendees</label>
			</div>
		</div>
	</div>
	<button type="submit">Submit</button>
</EditForm>

@if (IsSuccess)
{
	<p>Event has been added successfully!</p>
}

@code {

	[Parameter]
	public EventCallback<bool> OnSuccess { get; set; }

	[Parameter]
	public EventCard Card { get; set; } = new();

	private bool IsSuccess = false;
	private bool InEditMode = false;

	private async Task HandleSubmit()
	{
		Logger.LogInformation("Handle submit started");
		await SignalRService.EnsureConnectionOpen();
		if (InEditMode)
		{
			await SignalRService.UpdateCard(Card); // await EventCardRepository.Update(Card);
			await NotifyParent(true);
		}
		else
		{
			Card.Id = Guid.NewGuid().ToString();
			await SignalRService.AddCard(Card); // await EventCardRepository.Add(Card);
		}

		Logger.LogInformation("Handle submit finished");
		IsSuccess = true;


		await NotifyParent(IsSuccess);
		_ = Task.Run(async () =>
		{
			await Task.Delay(2000);
			IsSuccess = false;
			await InvokeAsync(StateHasChanged);
		});

		Card = new EventCard(); // Reset the form
	}

	private async Task NotifyParent(bool success)
	{
		if (OnSuccess.HasDelegate)
		{
			await OnSuccess.InvokeAsync(success);
		}
	}
}
