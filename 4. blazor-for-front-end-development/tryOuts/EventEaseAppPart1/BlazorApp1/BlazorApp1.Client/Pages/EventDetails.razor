@page "/event/{id:guid}"
@using Shared.Models
@using Shared.Interfaces;
@rendermode InteractiveWebAssembly
@inject ILogger<EventDetails> Logger;
@inject Shared.Communication.SignalRService SignalRService;
@inject Shared.Services.ApplicationStorage AppStorage

<h3>EventDetails</h3>

@if (stillRendering)
{
	<p>Loading in progress...</p>
}
else if (!isUserLoggedIn)
{
	<p>Please login to be able to view event details</p>
}
else if (isNotFound)
{
	<div class="alert alert-warning">
		Event not found or has been deleted.<br />
		<NavLink href="/eventsList">Return to Events List</NavLink>
	</div>
}
else if (isDeleted)
{
	<div class="success-message">
		Event has been deleted Successfully! <br />
		<NavLink href="/eventsList">Return to Events List</NavLink>
	</div>
}
else if (isEditing)
{
	<AddEvent Card="@card" OnSuccess="HandleEdit"/>
}
else
{
	<div class="event-card-details">
		<h4>@card.Name</h4>
		<p><strong>Description:</strong> @card.Description</p>
		<p><strong>Is Public:</strong> @(card.IsPublic ? "Yes" : "No")</p>
		<p><strong>Max Attendees:</strong> @card.MaxAttendees</p>
		<p><strong>Current Attendees:</strong> @card.CurrentAttendees</p>
		<p><strong>Date:</strong> @card.Date</p>
		<div class="horizontal">
			<button class="@showButton btn-primary" @onclick="() => DeleteCard(card.Id)"> Delete </button>
			<button class="@showButton btn-primary" @onclick="() => EditCard(card)"> Edit Card </button>
		</div>
		<div class="custom-radio-group">
			<label class="custom-radio">
				<input type="radio" name="eventInterest" value="Interested" />
				<span class="star"></span>
				<span class="radio-label">interested</span>
			</label>
			<label class="custom-radio">
				<input type="radio" name="eventInterest" value="going" />
				<span class="cartoon-btn"></span>
				<span class="radio-label">Going</span>
			</label>
		</div>
	</div>
}


@code {
	[Parameter]
	public Guid Id { get; set; }
	private EventCard? card = new EventCard();
	private string showButton = "none"; // keeps buttons invisible only show if Admin
	private bool stillRendering = true;
	private string userId = string.Empty;
	private bool isUserLoggedIn = false;
	private bool isAdmin = false; // This will be set based on the user's role


	private bool isNotFound = false;
	private bool isDeleted = false;
	private bool isEditing = false;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			userId = await AppStorage.GetItem(AppStorage.UserKey);
			
			await SignalRService.EnsureConnectionOpen();
			
			isUserLoggedIn = await SignalRService.IsSessionActive(userId);
			isAdmin = await SignalRService.IsAdmin(userId);
			
			showButton = isAdmin ? "" : "none";
			stillRendering = false;
			StateHasChanged();
		}
	}

	protected override async Task OnInitializedAsync()
	{
		await SignalRService.EnsureConnectionOpen();
		card = await SignalRService.GetCard(Id.ToString());
		Logger.LogInformation("EventDetails page initialized");
		if (card == null)
		{
			Logger.LogInformation("EventCard not found");
			isNotFound = true;
		}
		else
		{
			Logger.LogInformation($"EventCard found: {card.ToString()}");
		}

	}

	private async Task DeleteCard(string cardId)
	{
		if (card != null)
		{
			await SignalRService.DeleteCard(card);
			Logger.LogInformation($"EventCard deleted: {card.ToString()}");
			isDeleted = true;
		}
	}

	private async Task EditCard(EventCard card)
	{
		isEditing = true;
		StateHasChanged();
	}

	private void HandleEdit(bool isSuccess)
	{
		isEditing = false;
		StateHasChanged();
	}
}