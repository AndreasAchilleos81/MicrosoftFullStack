@page "/register"
@using Shared.Communication
@using Shared.Models
@using Shared.Repository;
@using Shared.Interfaces;
@using Microsoft.AspNetCore.SignalR.Client;
@rendermode InteractiveWebAssembly
@inject ILogger<Registration> Logger;
@inject Shared.Communication.SignalRService SignalRService;
<h4>Registration</h4>

<EditForm FormName="RegisterUserForm" EditContext="userContext" OnValidSubmit="@HandleValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<div class="mb-3">
		<label for="name" class="form-label">Name</label>
		<InputText id="name" class="form-control" @bind-Value="user.Name" />
		<ValidationMessage For="@(() => user.Name)" />
	</div>

	<div class="mb-3">
		<label for="lastName" class="form-label">Last Name</label>
		<InputText id="lastName" class="form-control" @bind-Value="user.LastName" />
		<ValidationMessage For="@(() => user.LastName)" />
	</div>

	<div class="mb-3">
		<label for="email" class="form-label">Email</label>
		<InputText id="email" class="form-control" @bind-Value="user.Email" />
		<ValidationMessage For="@(() => user.Email)" />
	</div>

	<button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@code {
	private EditContext userContext;
	private User user;
	private HubConnection hubConnection;
	private bool validating = false;

	private async Task HandleValidSubmit()
	{
		this.user.Id = Guid.NewGuid().ToString();
		Logger.LogInformation("User registration form submitted");

		if (SignalRService.HubConnection.State != HubConnectionState.Connected)
		{
			await SignalRService.HubConnection.StartAsync();
		}

		await SignalRService.SendUserAsync(user);
		Logger.LogInformation($"Registered successfully User: {user}");
	}

	protected override async Task OnInitializedAsync()
	{
		// SaveUser
		user = new User();
		userContext = new EditContext(user);
		userContext.OnValidationRequested += (sender, args) =>
		{
			if (validating) return;
			validating = true;

			if (!userContext.Validate())
			{
				Logger.LogInformation("Validation failed");
			}
			validating = false;
		};
	}
}