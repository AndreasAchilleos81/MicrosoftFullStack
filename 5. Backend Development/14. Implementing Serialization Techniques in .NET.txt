# .NET Serialization Tutorial

This tutorial demonstrates how to serialize data to three different formats in a .NET console application: binary, XML, and JSON.

## Step 1: Project Setup

Create a new console application using the .NET CLI:

```bash
dotnet new console -n SerializationDemo
```

### Creating the Person Class

Add a simple `Person` class to hold our data:

```csharp
public class Person
{
    public string Username { get; set; }
    public int UserAge { get; set; }
}
```

## Step 2: Binary Serialization

Binary serialization writes data to a `.dat` file in binary format.

### Required Using Statement
```csharp
using System.IO;
```

### Implementation
```csharp
static void Main(string[] args)
{
    // Create sample data
    Person samplePerson = new Person
    {
        Username = "Alice",
        UserAge = 30
    };

    // Binary serialization
    using (FileStream fs = new FileStream("person.dat", FileMode.Create))
    {
        using (BinaryWriter writer = new BinaryWriter(fs))
        {
            writer.Write(samplePerson.Username);
            writer.Write(samplePerson.UserAge);
        }
    }

    Console.WriteLine("Binary serialization complete.");
}
```

## Step 3: XML Serialization

XML serialization creates a human-readable XML file.

### Required Using Statement
```csharp
using System.Xml.Serialization;
```

### Implementation
```csharp
// XML serialization (add this after binary serialization)
XmlSerializer xmlSerializer = new XmlSerializer(typeof(Person));

using (FileStream fs = new FileStream("person.xml", FileMode.Create))
{
    xmlSerializer.Serialize(fs, samplePerson);
}

Console.WriteLine("XML serialization complete.");
```

### Output Example (person.xml)
```xml
<?xml version="1.0" encoding="utf-8"?>
<Person xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Username>Alice</Username>
  <UserAge>30</UserAge>
</Person>
```

## Step 4: JSON Serialization

JSON serialization uses .NET's built-in JSON serializer.

### Required Using Statement
```csharp
using System.Text.Json;
```

### Implementation
```csharp
// JSON serialization (add this after XML serialization)
string jsonData = JsonSerializer.Serialize(samplePerson);
File.WriteAllText("person.json", jsonData);

Console.WriteLine("JSON serialization complete.");
```

### Output Example (person.json)
```json
{
  "Username": "Alice",
  "UserAge": 30
}
```

## Complete Code Example

Here's the complete `Program.cs` file:

```csharp
using System;
using System.IO;
using System.Xml.Serialization;
using System.Text.Json;

namespace SerializationDemo
{
    public class Person
    {
        public string Username { get; set; }
        public int UserAge { get; set; }
    }

    class Program
    {
        static void Main(string[] args)
        {
            // Create sample data
            Person samplePerson = new Person
            {
                Username = "Alice",
                UserAge = 30
            };

            // Binary serialization
            using (FileStream fs = new FileStream("person.dat", FileMode.Create))
            {
                using (BinaryWriter writer = new BinaryWriter(fs))
                {
                    writer.Write(samplePerson.Username);
                    writer.Write(samplePerson.UserAge);
                }
            }
            Console.WriteLine("Binary serialization complete.");

            // XML serialization
            XmlSerializer xmlSerializer = new XmlSerializer(typeof(Person));
            using (FileStream fs = new FileStream("person.xml", FileMode.Create))
            {
                xmlSerializer.Serialize(fs, samplePerson);
            }
            Console.WriteLine("XML serialization complete.");

            // JSON serialization
            string jsonData = JsonSerializer.Serialize(samplePerson);
            File.WriteAllText("person.json", jsonData);
            Console.WriteLine("JSON serialization complete.");
        }
    }
}
```

## File Output Summary

After running the program, you'll have three files:

1. **person.dat** - Binary file (not human-readable)
2. **person.xml** - XML formatted text file
3. **person.json** - JSON formatted text file

All three files contain the same data (Username: "Alice", UserAge: 30) but in different serialization formats.