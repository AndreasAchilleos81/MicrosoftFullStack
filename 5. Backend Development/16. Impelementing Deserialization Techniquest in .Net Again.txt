# .NET Console Deserialization Tutorial

This tutorial demonstrates how to deserialize data from various file formats (binary, XML, JSON) into C# objects in a console application. We'll also measure the performance of each deserialization method.

## Step 1: Project Setup

Create a new console application:

```bash
dotnet new console -n DeserializationDemo
```

### Creating the Person Class

Add a `Person` class to store the deserialized data:

```csharp
public class Person
{
    public string Username { get; set; }
    public int UserAge { get; set; }
}
```

## Step 2: Binary Deserialization

Binary deserialization reads data from a `.dat` file and converts it back to C# objects.

### Required Using Statement
```csharp
using System.IO;
using System.Diagnostics;
```

### Implementation
```csharp
static void Main(string[] args)
{
    // Binary Deserialization
    var stopwatch = Stopwatch.StartNew();
    
    using (var fileStream = new FileStream("person.dat", FileMode.Open))
    {
        using (var reader = new BinaryReader(fileStream))
        {
            var deserializedPerson = new Person
            {
                Username = reader.ReadString(),
                UserAge = reader.ReadInt32()
            };
            
            stopwatch.Stop();
            
            Console.WriteLine($"Binary Deserialization:");
            Console.WriteLine($"Username: {deserializedPerson.Username}");
            Console.WriteLine($"User Age: {deserializedPerson.UserAge}");
            Console.WriteLine($"Time taken: {stopwatch.ElapsedMilliseconds} ms");
            Console.WriteLine();
        }
    }
}
```

**Note**: You need a `person.dat` file in your project root directory for this to work.

## Step 3: XML Deserialization

XML deserialization converts XML data into C# objects.

### Required Using Statement
```csharp
using System.Xml.Serialization;
```

### Implementation
```csharp
// XML Deserialization
string xmlData = @"<?xml version=""1.0"" encoding=""utf-8""?>
<Person>
    <Username>Alice</Username>
    <UserAge>30</UserAge>
</Person>";

var xmlStopwatch = Stopwatch.StartNew();

var xmlSerializer = new XmlSerializer(typeof(Person));
using (var reader = new StringReader(xmlData))
{
    var deserializedPerson = (Person)xmlSerializer.Deserialize(reader);
    
    xmlStopwatch.Stop();
    
    Console.WriteLine($"XML Deserialization:");
    Console.WriteLine($"Username: {deserializedPerson.Username}");
    Console.WriteLine($"User Age: {deserializedPerson.UserAge}");
    Console.WriteLine($"Time taken: {xmlStopwatch.ElapsedMilliseconds} ms");
    Console.WriteLine();
}
```

## Step 4: JSON Deserialization

JSON deserialization converts JSON data into C# objects.

### Required Using Statement
```csharp
using System.Text.Json;
```

### Implementation
```csharp
// JSON Deserialization
string jsonData = @"{
    ""Username"": ""Bob"",
    ""UserAge"": 25
}";

var jsonStopwatch = Stopwatch.StartNew();

var deserializedPerson = JsonSerializer.Deserialize<Person>(jsonData);

jsonStopwatch.Stop();

Console.WriteLine($"JSON Deserialization:");
Console.WriteLine($"Username: {deserializedPerson.Username}");
Console.WriteLine($"User Age: {deserializedPerson.UserAge}");
Console.WriteLine($"Time taken: {jsonStopwatch.ElapsedMilliseconds} ms");
Console.WriteLine();
```

## Complete Code Example

Here's the complete `Program.cs` file:

```csharp
using System;
using System.Diagnostics;
using System.IO;
using System.Text.Json;
using System.Xml.Serialization;

namespace DeserializationDemo
{
    public class Person
    {
        public string Username { get; set; }
        public int UserAge { get; set; }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("=== Deserialization Performance Comparison ===\n");

            // Binary Deserialization (requires person.dat file)
            try
            {
                var binaryStopwatch = Stopwatch.StartNew();
                
                using (var fileStream = new FileStream("person.dat", FileMode.Open))
                {
                    using (var reader = new BinaryReader(fileStream))
                    {
                        var deserializedPerson = new Person
                        {
                            Username = reader.ReadString(),
                            UserAge = reader.ReadInt32()
                        };
                        
                        binaryStopwatch.Stop();
                        
                        Console.WriteLine("Binary Deserialization:");
                        Console.WriteLine($"Username: {deserializedPerson.Username}");
                        Console.WriteLine($"User Age: {deserializedPerson.UserAge}");
                        Console.WriteLine($"Time taken: {binaryStopwatch.ElapsedMilliseconds} ms");
                        Console.WriteLine();
                    }
                }
            }
            catch (FileNotFoundException)
            {
                Console.WriteLine("Binary Deserialization: person.dat file not found");
                Console.WriteLine();
            }

            // XML Deserialization
            string xmlData = @"<?xml version=""1.0"" encoding=""utf-8""?>
<Person>
    <Username>Alice</Username>
    <UserAge>30</UserAge>
</Person>";

            var xmlStopwatch = Stopwatch.StartNew();

            var xmlSerializer = new XmlSerializer(typeof(Person));
            using (var reader = new StringReader(xmlData))
            {
                var deserializedPerson = (Person)xmlSerializer.Deserialize(reader);
                
                xmlStopwatch.Stop();
                
                Console.WriteLine("XML Deserialization:");
                Console.WriteLine($"Username: {deserializedPerson.Username}");
                Console.WriteLine($"User Age: {deserializedPerson.UserAge}");
                Console.WriteLine($"Time taken: {xmlStopwatch.ElapsedMilliseconds} ms");
                Console.WriteLine();
            }

            // JSON Deserialization
            string jsonData = @"{
    ""Username"": ""Bob"",
    ""UserAge"": 25
}";

            var jsonStopwatch = Stopwatch.StartNew();

            var deserializedPerson = JsonSerializer.Deserialize<Person>(jsonData);

            jsonStopwatch.Stop();

            Console.WriteLine("JSON Deserialization:");
            Console.WriteLine($"Username: {deserializedPerson.Username}");
            Console.WriteLine($"User Age: {deserializedPerson.UserAge}");
            Console.WriteLine($"Time taken: {jsonStopwatch.ElapsedMilliseconds} ms");
            Console.WriteLine();

            Console.WriteLine("Press any key to exit...");
            Console.ReadKey();
        }
    }
}
```

## Creating Test Files

### Creating person.dat (Binary File)
To create the binary file for testing, you can use this helper method:

```csharp
static void CreateBinaryFile()
{
    using (var fileStream = new FileStream("person.dat", FileMode.Create))
    {
        using (var writer = new BinaryWriter(fileStream))
        {
            writer.Write("John"); // Username
            writer.Write(35);     // UserAge
        }
    }
}
```

### Creating person.xml (XML File)
```xml
<?xml version="1.0" encoding="utf-8"?>
<Person>
    <Username>Alice</Username>
    <UserAge>30</UserAge>
</Person>
```

### Creating person.json (JSON File)
```json
{
    "Username": "Bob",
    "UserAge": 25
}
```

## Performance Comparison

When you run the application, you'll see output similar to:

```
=== Deserialization Performance Comparison ===

Binary Deserialization:
Username: John
User Age: 35
Time taken: 2 ms

XML Deserialization:
Username: Alice
User Age: 30
Time taken: 15 ms

JSON Deserialization:
Username: Bob
User Age: 25
Time taken: 1 ms
```

## Key Performance Insights

1. **Binary**: Fastest for large files, but not human-readable
2. **JSON**: Very fast and human-readable, best for most scenarios
3. **XML**: Slower due to verbose format, but widely supported

## Best Practices

- Use **JSON** for most applications (fast + readable)
- Use **Binary** for performance-critical applications with large datasets
- Use **XML** when interoperability with legacy systems is required
- Always measure performance with realistic data sizes
- Consider file size vs. processing speed trade-offs

## Error Handling

Always include proper error handling for file operations:

```csharp
try
{
    // Deserialization code here
}
catch (FileNotFoundException ex)
{
    Console.WriteLine($"File not found: {ex.Message}");
}
catch (JsonException ex)
{
    Console.WriteLine($"JSON parsing error: {ex.Message}");
}
catch (Exception ex)
{
    Console.WriteLine($"Unexpected error: {ex.Message}");
}
```

This tutorial provides a comprehensive comparison of different deserialization methods, allowing you to choose the best approach for your specific use case.