# Complete CRUD API Guide with Examples

## What is CRUD?

CRUD is one of the most important and common API concepts in computer science. The principles of CRUD power every type of content API on the planet, from blogs and social media to medical records and satellite tracking.

**CRUD** is an acronym that stands for:
- **C**reate - Making a new record
- **R**ead - Retrieving data (single item or collections)
- **U**pdate - Making changes to existing data
- **D**elete - Removing data

## Setting Up the Blog Example

Let's implement a CRUD API for managing blog posts. Here's our basic data structure:

```csharp
public class Blog
{
    public required string Title { get; set; }
    public required string Body { get; set; }
}

// In-memory data storage (for demonstration)
private static List<Blog> blogs = new List<Blog>
{
    new Blog { Title = "My First Post", Body = "This is my first blog post" },
    new Blog { Title = "My Second Post", Body = "This is my second blog post" }
};
```

> **Note**: In production applications, you would use a database instead of an in-memory list. This example abstracts well to database operations - instead of adding to a list, you'd add to a database table.

## Starting the Application

```bash
dotnet watch run
```

The `watch` flag automatically restarts the server when you make changes to your code.

## 1. READ Operations (The "R" in CRUD)

### Get All Blogs

```csharp
app.MapGet("/blogs", () =>
{
    return blogs;
});
```

**HTTP Request:**
```http
GET http://localhost:5127/blogs
```

**Response:**
```json
[
    {
        "title": "My First Post",
        "body": "This is my first blog post"
    },
    {
        "title": "My Second Post", 
        "body": "This is my second blog post"
    }
]
```

### Get Single Blog by ID

```csharp
app.MapGet("/blogs/{id}", (int id) =>
{
    if (id < 0 || id >= blogs.Count)
    {
        return Results.NotFound();
    }
    
    return Results.Ok(blogs[id]);
});
```

**HTTP Request:**
```http
GET http://localhost:5127/blogs/0
```

**Response:**
```json
{
    "title": "My First Post",
    "body": "This is my first blog post"
}
```

**Error Handling:**
- Requesting `/blogs/3` when only 2 blogs exist returns `404 Not Found`
- Negative indices also return `404 Not Found`

## 2. CREATE Operations (The "C" in CRUD)

```csharp
app.MapPost("/blogs", (Blog blog) =>
{
    blogs.Add(blog);
    
    // Return 201 Created with location and the created blog
    return Results.Created($"/blogs/{blogs.Count - 1}", blog);
});
```

**HTTP Request:**
```http
POST http://localhost:5127/blogs
Content-Type: application/json

{
    "title": "My Third Blog",
    "body": "This is my third blog post"
}
```

**Response:**
```
Status: 201 Created
Location: /blogs/2

{
    "title": "My Third Blog",
    "body": "This is my third blog post"
}
```

## 3. DELETE Operations (The "D" in CRUD)

```csharp
app.MapDelete("/blogs/{id}", (int id) =>
{
    if (id < 0 || id >= blogs.Count)
    {
        return Results.NotFound();
    }
    
    // Optional: store the deleted blog before removal
    // var deletedBlog = blogs[id];
    
    blogs.RemoveAt(id);
    
    return Results.NoContent(); // 204 No Content
});
```

**HTTP Request:**
```http
DELETE http://localhost:5127/blogs/1
```

**Response:**
```
Status: 204 No Content
(Empty response body)
```

## 4. UPDATE Operations (The "U" in CRUD)

```csharp
app.MapPut("/blogs/{id}", (int id, Blog blog) =>
{
    if (id < 0 || id >= blogs.Count)
    {
        return Results.NotFound();
    }
    
    blogs[id] = blog;
    
    return Results.Ok(blog);
});
```

**HTTP Request:**
```http
PUT http://localhost:5127/blogs/0
Content-Type: application/json

{
    "title": "Updated First Post",
    "body": "This is my updated first blog post"
}
```

**Response:**
```json
{
    "title": "Updated First Post",
    "body": "This is my updated first blog post"
}
```

## Complete API Routes Summary

| HTTP Method | Route | Purpose | Request Body | Response |
|------------|-------|---------|--------------|----------|
| GET | `/blogs` | Get all blogs | None | Array of blogs |
| GET | `/blogs/{id}` | Get single blog | None | Single blog or 404 |
| POST | `/blogs` | Create new blog | Blog object | Created blog (201) |
| PUT | `/blogs/{id}` | Update existing blog | Blog object | Updated blog or 404 |
| DELETE | `/blogs/{id}` | Delete blog | None | 204 No Content or 404 |

## Testing Your API

You can test your API using an HTTP client file (`.http` or `.rest`):

```http
### Get all blogs
GET http://localhost:5127/blogs

### Get single blog
GET http://localhost:5127/blogs/0

### Create new blog
POST http://localhost:5127/blogs
Content-Type: application/json

{
    "title": "New Blog Post",
    "body": "Content of the new blog post"
}

### Update existing blog
PUT http://localhost:5127/blogs/0
Content-Type: application/json

{
    "title": "Updated Blog Post",
    "body": "Updated content"
}

### Delete blog
DELETE http://localhost:5127/blogs/1
```

## HTTP Status Codes Used

- **200 OK** - Successful GET/PUT requests
- **201 Created** - Successful POST requests
- **204 No Content** - Successful DELETE requests
- **404 Not Found** - Resource doesn't exist
- **415 Unsupported Media Type** - Wrong Content-Type header

## Key Points to Remember

1. **RESTful Conventions**: Use the same base path (`/blogs`) for all operations on the same resource type
2. **HTTP Methods Matter**: Use GET for reading, POST for creating, PUT for updating, DELETE for deleting
3. **Error Handling**: Always validate input and return appropriate HTTP status codes
4. **Data Persistence**: In production, replace in-memory lists with database operations
5. **Server Restart**: When adding new routes, manually restart the development server

## Real-World Applications

This CRUD pattern is fundamental to web development and applies to:
- Blog management systems
- E-commerce product catalogs
- User account management
- Content management systems
- Social media platforms
- Medical record systems
- Inventory management

Once you understand CRUD, you can build virtually any data-driven application by adding authentication, permissions, validation, and a proper database layer.